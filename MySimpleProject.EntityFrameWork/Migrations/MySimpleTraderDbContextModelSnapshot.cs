// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySimpleProject.EntityFrameWork;

#nullable disable

namespace MySimpleProject.EntityFrameWork.Migrations
{
    [DbContext(typeof(MySimpleTraderDbContext))]
    partial class MySimpleTraderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MySimpleTrader.Domain.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("accountHolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("accountHolderId");

                    b.ToTable("TbAcounts");
                });

            modelBuilder.Entity("MySimpleTrader.Domain.Models.AssestTransAction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateProcess")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isPurchase")
                        .HasColumnType("bit");

                    b.Property<int>("shares")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.ToTable("TbAssestTransAction");
                });

            modelBuilder.Entity("MySimpleTrader.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("dateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TbUsers");
                });

            modelBuilder.Entity("MySimpleTrader.Domain.Models.Account", b =>
                {
                    b.HasOne("MySimpleTrader.Domain.Models.User", "accountHolder")
                        .WithMany()
                        .HasForeignKey("accountHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountHolder");
                });

            modelBuilder.Entity("MySimpleTrader.Domain.Models.AssestTransAction", b =>
                {
                    b.HasOne("MySimpleTrader.Domain.Models.Account", "account")
                        .WithMany("assestTransActions")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MySimpleTrader.Domain.Models.Stock", "Stock", b1 =>
                        {
                            b1.Property<int>("AssestTransActionid")
                                .HasColumnType("int");

                            b1.Property<double>("priePerShare")
                                .HasColumnType("float");

                            b1.Property<string>("symbole")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AssestTransActionid");

                            b1.ToTable("TbAssestTransAction");

                            b1.WithOwner()
                                .HasForeignKey("AssestTransActionid");
                        });

                    b.Navigation("Stock")
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("MySimpleTrader.Domain.Models.Account", b =>
                {
                    b.Navigation("assestTransActions");
                });
#pragma warning restore 612, 618
        }
    }
}
